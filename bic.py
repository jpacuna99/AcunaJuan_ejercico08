{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/srv/conda/envs/notebook/lib/python3.7/site-packages/ipykernel_launcher.py:10: RuntimeWarning: divide by zero encountered in double_scalars\n",
      "  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "index 3 is out of bounds for axis 1 with size 3",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-e706a396b357>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbetas_B\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdensity\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr\"$\\beta_{}= {:.2f}\\pm {:.2f}$\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbetas_B\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbetas_B\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr\"$\\beta_{}$\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: index 3 is out of bounds for axis 1 with size 3"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "def model_A(x, params):\n",
    "    y = params[0]+x*params[1]+params[2]*x**2.\n",
    "    return y\n",
    "\n",
    "def model_B(x, params):\n",
    "    y = params[0]*(np.exp(-0.5*(x-params[1])**2./params[2]**2.))\n",
    "    return y\n",
    "\n",
    "def model_C(x, params):\n",
    "    y = params[0]*(np.exp(-0.5*(x-params[1])**2./params[2]**2.))\n",
    "    y += params[0]*(np.exp(-0.5*(x-params[3])**2./params[4]**2.))\n",
    "    return y\n",
    "\n",
    "def loglike(x_obs, y_obs, sigma_y_obs, betas,model):\n",
    "    n_obs = len(y_obs)\n",
    "    l = 0.0\n",
    "    for i in range(n_obs):\n",
    "        l += -0.5*(y_obs[i]-model(x_obs[i], betas))**2/sigma_y_obs[i]**2\n",
    "    return l\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def run_mcmc(x_obs,y_obs, n_dim, n_iterations, sigma_y_obs,model):\n",
    "    \n",
    "    \n",
    "    bestlike=0\n",
    "    marcador=0\n",
    "    betas = np.zeros([n_iterations, n_dim+1])\n",
    "    for i in range(1, n_iterations):\n",
    "        current_betas = betas[i-1,:]\n",
    "        next_betas = current_betas + np.random.normal(scale=0.1, size=n_dim+1)\n",
    "\n",
    "        loglike_current = loglike(x_obs, y_obs, sigma_y_obs, current_betas,model)\n",
    "        loglike_next = loglike(x_obs, y_obs, sigma_y_obs, next_betas,model)\n",
    "        r = np.min([np.exp(loglike_next - loglike_current), 1.0])\n",
    "        \n",
    "        if loglike_next<loglike_current:\n",
    "            bestlike=loglike_next\n",
    "            marcador=i\n",
    "        else:\n",
    "            bestlike=loglike_current\n",
    "            \n",
    "        alpha = np.random.random()\n",
    "        \n",
    "\n",
    "        if alpha < r:\n",
    "            betas[i,:] = next_betas\n",
    "        else:\n",
    "            betas[i,:] = current_betas\n",
    "            \n",
    "    betamejor=betas[marcador,:]        \n",
    "    betas = betas[n_iterations//2:,:]\n",
    "    \n",
    "    \n",
    "    \n",
    "    return {'betas':betas, 'x_obs':x_obs, 'y_obs':y_obs,'best_like':bestlike,'MB':betamejor}\n",
    "\n",
    "\n",
    "def BIC(like,n_var,data):\n",
    "    return 2*(-like+n_var*np.log(len(data))/2.)\n",
    "\n",
    "data = np.loadtxt(\"data_to_fit.txt\")\n",
    "x_obs = data[:,0]\n",
    "y_obs = data[:,1]\n",
    "sigma= data[:,2]\n",
    "\n",
    "\n",
    "results_A = run_mcmc(x_obs,y_obs,2,20000,sigma,model_A)\n",
    "results_B = run_mcmc(x_obs,y_obs,2,20000,sigma,model_B)\n",
    "results_C = run_mcmc(x_obs,y_obs,5,20000,sigma,model_B)\n",
    "betas_A = results_A['betas']\n",
    "betas_B = results_B['betas']\n",
    "betas_C = results_C['betas']\n",
    "\n",
    "xf=np.linspace(np.amin(x_obs),np.amax(x_obs),1000)\n",
    "plt.figure()\n",
    "\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "for i in range(0,3):\n",
    "    plt.subplot(2,2,i+1)\n",
    "    plt.hist(betas_A[:,i],bins=30, density=True)\n",
    "    plt.title(r\"$\\beta_{}= {:.2f}\\pm {:.2f}$\".format(i,np.mean(betas_A[:,]), np.std(betas_A[:,i])))\n",
    "    plt.xlabel(r\"$\\beta_{}$\".format(i))\n",
    "   \n",
    "plt.subplot(2,2,4)\n",
    "bic=BIC(results_A[\"best_like\"],3,y_obs)\n",
    "plt.plot(xf,model_A(xf,results_A['MB']),c=\"r\")\n",
    "plt.scatter(x_obs,y_obs)\n",
    "plt.errorbar(x_obs,y_obs,sigma,fmt=\"o\")\n",
    "plt.title(r\"$BIC= {:.2f}\".format(bic))\n",
    "plt.subplots_adjust(hspace=0.8)\n",
    "\n",
    "\n",
    "\n",
    "plt.savefig(\"Modelo_A.png\",  bbox_inches='tight')    \n",
    "\n",
    "\n",
    "plt.figure()\n",
    "for i in range(0,3):\n",
    "    plt.subplot(2,2,i+1)\n",
    "    plt.hist(betas_B[:,i],bins=30, density=True)\n",
    "    plt.title(r\"$\\beta_{}= {:.2f}\\pm {:.2f}$\".format(i,np.mean(betas_B[:,i]), np.std(betas_B[:,i])))\n",
    "    plt.xlabel(r\"$\\beta_{}$\".format(i))\n",
    "   \n",
    "plt.subplot(2,2,4)\n",
    "bic=BIC(results_B[\"best_like\"],3,y_obs)\n",
    "plt.plot(xf,model_B(xf,results_B['MB']),c=\"r\")\n",
    "plt.scatter(x_obs,y_obs)\n",
    "plt.errorbar(x_obs,y_obs,sigma,fmt=\"o\")\n",
    "plt.title(r\"$BIC= {:.2f}\".format(bic))\n",
    "plt.subplots_adjust(hspace=0.8)\n",
    "\n",
    "\n",
    "\n",
    "plt.savefig(\"Modelo_B.png\",  bbox_inches='tight')    \n",
    "\n",
    "plt.figure()\n",
    "for i in range(0,3):\n",
    "    plt.subplot(2,2,i+1)\n",
    "    plt.hist(betas_B[:,i],bins=30, density=True)\n",
    "    plt.title(r\"$\\beta_{}= {:.2f}\\pm {:.2f}$\".format(i,np.mean(betas_B[:,i]), np.std(betas_B[:,i])))\n",
    "    plt.xlabel(r\"$\\beta_{}$\".format(i))\n",
    "   \n",
    "plt.subplot(2,2,4)\n",
    "bic=BIC(results_C[\"best_like\"],5,y_obs)\n",
    "plt.plot(xf,model_B(xf,results_C['MB']),c=\"r\")\n",
    "plt.scatter(x_obs,y_obs)\n",
    "plt.errorbar(x_obs,y_obs,sigma,fmt=\"o\")\n",
    "plt.title(r\"$BIC= {:.2f}\".format(bic))\n",
    "plt.subplots_adjust(hspace=0.8)\n",
    "\n",
    "\n",
    "\n",
    "plt.savefig(\"Modelo_C.png\",  bbox_inches='tight')   \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
